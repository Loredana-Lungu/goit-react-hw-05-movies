{"version":3,"file":"static/js/242.df673ddd.chunk.js","mappings":"kOAyDA,QApDgB,WACZ,IAAQA,GAAYC,EAAAA,EAAAA,KAAZD,QACRE,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAoB1B,OAlBAI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAG4C,OAH5CF,EAAAC,KAAA,EAGPJ,EAAG,sCAAAM,OAAyCrB,EAAO,oEAAAkB,EAAAE,KAAA,EAElCE,EAAAA,EAAMC,IAAIR,GAAK,KAAD,EAA/BC,EAAQE,EAAAM,KAEdjB,EAAWS,EAASS,KAAKC,SAASR,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAElCU,QAAQC,MAAM,2BAA0BX,EAAAS,IAAS,yBAAAT,EAAAY,OAAA,GAAAhB,EAAA,kBAExD,kBAXiB,OAAAJ,EAAAqB,MAAA,KAAAC,UAAA,KAalBvB,GACJ,GAAG,CAACT,IAGqB,IAAnBM,EAAQ2B,QACAC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,0CAIfC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,aAEJD,EAAAA,EAAAA,KAAA,MAAAC,SACG7B,EAAQ+B,KAAI,SAAAC,GAAG,OACdF,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,WAASG,EAAIC,WACjBL,EAAAA,EAAAA,KAAA,KAAAC,SAAIG,EAAIE,YAFDF,EAAIG,GAGR,QAKjB,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { PropTypes } from 'prop-types';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n    \n    useEffect(() => {\n      const fetchReviews = async () => {\n          try {\n              // URL actualizat cu cheia API direct Ã®n parametru\n              const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&api_key=b3fe8ad645f337f3fa9ceb8e5b164aa5`;\n  \n              const response = await axios.get(url);\n  \n              setReviews(response.data.results);\n          } catch (error) {\n              console.error('Error fetching reviews: ', error);\n          }\n      };\n  \n      fetchReviews();\n  }, [movieId]);\n  \n\n    if (reviews.length === 0) {\n        return (<div>No reviews available for this movie.</div>);\n    }\n\n    return (\n      <div>\n        <h1>Reviews</h1>\n\n        <ul>\n          {reviews.map(rev => (\n            <li key={rev.id}>\n              <h3>Author: {rev.author}</h3>\n              <p>{rev.content}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n\nexport default Reviews;"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","useEffect","fetchReviews","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","wrap","_context","prev","next","concat","axios","get","sent","data","results","t0","console","error","stop","apply","arguments","length","_jsx","children","_jsxs","map","rev","author","content","id"],"sourceRoot":""}