{"version":3,"file":"static/js/956.2bdb7035.chunk.js","mappings":"sOAQaA,GANcC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gEAMnBH,EAAAA,GAAOI,GAAEC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+E,kBC6D3B,QA/Da,WACX,IAAQG,GAAYC,EAAAA,EAAAA,KAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAqBtB,OAnBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAG2C,OAH3CF,EAAAC,KAAA,EAGRJ,EAAG,sCAAAM,OAAyCzB,EAAO,oEAAAsB,EAAAE,KAAA,EAElCE,EAAAA,EAAMC,IAAIR,GAAK,KAAD,EAA/BC,EAAQE,EAAAM,KACdrB,EAAQa,EAASS,KAAKvB,MACtBK,GAAS,GAAOW,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAEhBS,QAAQrB,MAAM,mCAAkCY,EAAAQ,IAChDnB,GAAS,GAAM,yBAAAW,EAAAU,OAAA,GAAAd,EAAA,kBAElB,kBAZc,OAAAJ,EAAAmB,MAAA,KAAAC,UAAA,KAcfrB,GACF,GAAG,CAACb,IAGAU,GACKyB,EAAAA,EAAAA,KAAA,OAAAC,SAAK,4DAGT9B,GAAwB,IAAhBA,EAAK+B,QAKhBC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACED,EAAAA,EAAAA,KAAC1C,EAAE,CAAA2C,SAAC,UACJD,EAAAA,EAAAA,KAAA,MAAAC,SACG9B,EAAKiC,KAAI,SAAAC,GAAK,OACbF,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EAAGD,EAAAA,EAAAA,KAAA,UAAAC,SAASI,EAAMC,OAAc,OAAKD,EAAME,WAAa,uBACvDF,EAAMG,eACLR,EAAAA,EAAAA,KAAA,OACES,IAAG,kCAAAnB,OAAoCe,EAAMG,cAC7CE,IAAKL,EAAMC,SALRD,EAAMM,GAQV,UAhBJX,EAAAA,EAAAA,KAAA,OAAAC,SAAK,iDAqBhB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ProfilePath = styled.img`\n  width: 50px;\n  height: auto;\n  margin: 10px 5px;\n`;\n\nexport const H2 = styled.h2`\n  color: rgb(12, 4, 20);\n  font-family: 'Montserrat', sans-serif;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { H2 } from './Cast.styled.js';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        // Include cheia API direct Ã®n URL\n        const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US&api_key=b3fe8ad645f337f3fa9ceb8e5b164aa5`;\n\n        const response = await axios.get(url);\n        setCast(response.data.cast);\n        setError(false);\n      } catch (error) {\n        console.error(\"Error fetching cast information:\", error);\n        setError(true);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n\n  if (error) {\n    return <div>Error loading cast information. Please try again later.</div>;\n  }\n\n  if (!cast || cast.length === 0) {\n    return <div>No cast information available for this movie.</div>;\n  }\n\n  return (\n    <div>\n      <H2>Cast</H2>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>\n            <p><strong>{actor.name}</strong> as {actor.character || 'Unknown Character'}</p>\n            {actor.profile_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                alt={actor.name}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      character: PropTypes.string,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n"],"names":["H2","styled","img","_templateObject","_taggedTemplateLiteral","h2","_templateObject2","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","useEffect","fetchCast","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","wrap","_context","prev","next","concat","axios","get","sent","data","t0","console","stop","apply","arguments","_jsx","children","length","_jsxs","map","actor","name","character","profile_path","src","alt","id"],"sourceRoot":""}