{"version":3,"file":"static/js/956.f034b194.chunk.js","mappings":"sOAQaA,GANcC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gEAMnBH,EAAAA,GAAOI,GAAEC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+E,kBCiE3B,QAnEa,WACX,IAAQG,GAAYC,EAAAA,EAAAA,KAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAyBtB,OAvBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAESC,EAAAA,EAAMC,IAAI,sCAADC,OACQ1B,EAAO,YAC7C,CACE2B,QAAS,CACPC,cAAc,UAADF,OAAYG,mPACzBC,OAAQ,sBAGZ,KAAD,EARKX,EAAQE,EAAAU,KASdxB,EAAQY,EAASa,KAAK1B,MACtBK,GAAS,GAAOU,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAEhBa,QAAQxB,MAAM,mCAAkCW,EAAAY,IAChDtB,GAAS,GAAM,yBAAAU,EAAAc,OAAA,GAAAjB,EAAA,kBAElB,kBAjBc,OAAAJ,EAAAsB,MAAA,KAAAC,UAAA,KAmBfxB,GACF,GAAG,CAACb,IAEAU,GACK4B,EAAAA,EAAAA,KAAA,OAAAC,SAAK,4DAGTjC,GAAwB,IAAhBA,EAAKkC,QAKhBC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACED,EAAAA,EAAAA,KAAC7C,EAAE,CAAA8C,SAAC,UACJD,EAAAA,EAAAA,KAAA,MAAAC,SACGjC,EAAKoC,KAAI,SAAAC,GAAK,OACbF,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,KAAAF,SAAA,EAAGD,EAAAA,EAAAA,KAAA,UAAAC,SAASI,EAAMC,OAAc,OAAKD,EAAME,WAAa,uBACvDF,EAAMG,eACLR,EAAAA,EAAAA,KAAA,OACES,IAAG,kCAAArB,OAAoCiB,EAAMG,cAC7CE,IAAKL,EAAMC,SALRD,EAAMM,GAQV,UAhBJX,EAAAA,EAAAA,KAAA,OAAAC,SAAK,iDAqBhB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ProfilePath = styled.img`\n  width: 50px;\n  height: auto;\n  margin: 10px 5px;\n`;\n\nexport const H2 = styled.h2`\n  color: rgb(12, 4, 20);\n  font-family: 'Montserrat', sans-serif;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { H2 } from './Cast.styled.js';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n          {\n            headers: {\n              Authorization: `Bearer ${process.env.REACT_APP_BEARER_TOKEN}`,\n              Accept: 'application/json',\n            },\n          }\n        );\n        setCast(response.data.cast);\n        setError(false);\n      } catch (error) {\n        console.error(\"Error fetching cast information:\", error);\n        setError(true);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  if (error) {\n    return <div>Error loading cast information. Please try again later.</div>;\n  }\n\n  if (!cast || cast.length === 0) {\n    return <div>No cast information available for this movie.</div>;\n  }\n\n  return (\n    <div>\n      <H2>Cast</H2>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>\n            <p><strong>{actor.name}</strong> as {actor.character || 'Unknown Character'}</p>\n            {actor.profile_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                alt={actor.name}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      character: PropTypes.string,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n"],"names":["H2","styled","img","_templateObject","_taggedTemplateLiteral","h2","_templateObject2","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","useEffect","fetchCast","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","headers","Authorization","process","Accept","sent","data","t0","console","stop","apply","arguments","_jsx","children","length","_jsxs","map","actor","name","character","profile_path","src","alt","id"],"sourceRoot":""}